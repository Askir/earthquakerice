{"version":3,"sources":["EarthquakeApi.js","FeedService.js","QuakeItem.js","QuakeList.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","paramsSerializer","params","qs","stringify","FeedService","get","response","data","QuakeItem","earthquake","date","Date","properties","time","className","place","toLocaleString","mag","HeadRow","icon","ic_gps_fixed","QuakeList","earthquakes","map","key","id","RedCircle","radius","style","width","height","Map","useState","lat","lng","center","zoom","setZoom","bootstrapURLKeys","defaultCenter","defaultZoom","onZoomAnimationEnd","newZoom","console","log","geometry","coordinates","App","setEathquakes","useEffect","retrieveDaily","then","type","features","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4WAUeA,E,OALHC,EAAMC,OAAO,CACvBC,QAHc,+BAIdC,iBAAkB,SAACC,GAAD,OAAYC,IAAGC,UAAUF,MCE9BG,E,6OALYR,EAAIS,IAAI,iD,cAAzBC,E,yBACCA,EAASC,M,8HCiBLC,MAjBf,YAAyC,IAAD,IAAnBC,kBAAmB,MAAN,GAAM,EAChCC,EAAO,IAAIC,KAAKF,EAAWG,WAAWC,MAC5C,OACE,wBAAIC,UAAU,aACZ,yBAAKA,UAAU,SACZL,EAAWG,WAAWG,OAEzB,yBAAKD,UAAU,QAAQJ,EAAKM,kBAC5B,yBAAKF,UAAU,aACZ,IACAL,EAAWG,WAAWK,IACtB,OCDT,SAASC,IACP,OACE,yBAAKJ,UAAU,aACb,6BACG,WACD,kBAAC,OAAD,CAAMK,KAAMC,kBAEd,6BACG,QAEH,6BACG,cAKMC,MAzBf,YAA0C,IAAD,IAApBC,mBAAoB,MAAN,GAAM,EACvC,OACE,yBAAKR,UAAU,aACb,kBAACI,EAAD,MACCI,EAAYC,KAAI,SAACd,GAAD,OAAgB,kBAAC,EAAD,CAAWA,WAAYA,EAAYe,IAAKf,EAAWgB,U,uBC2B1F,SAASC,EAAT,GAAqC,IAAD,IAAfC,cAAe,MAAN,GAAM,EAClC,OACE,yBAAKC,MAAO,CAAEC,MAAOF,EAAQG,OAAQH,GAAUb,UAAU,cAK9CiB,MAxCf,YAA+B,IAAhBT,EAAe,EAAfA,YAAe,EAEAU,mBADH,CAAEC,IAAK,GAAIC,KAAM,MADd,mBAErBC,EAFqB,aAGJH,mBAAS,IAHL,mBAGrBI,EAHqB,KAGfC,EAHe,KAQ5B,OACE,6BACE,yBAAKvB,UAAU,aAAf,8BACA,yBAAKA,UAAU,cACb,kBAAC,IAAD,CACAwB,iBAAkB,CAAEd,IAAK,IACzBe,cAAeJ,EACfK,YAAaJ,EACbK,mBAZN,SAA2BC,GACzBC,QAAQC,IAAIF,GACZL,EAAQK,KAYHpB,EAAYC,KAAI,SAACd,GAAD,OACf,kBAACiB,EAAD,CACEO,IAAKxB,EAAWoC,SAASC,YAAY,GACrCZ,IAAKzB,EAAWoC,SAASC,YAAY,GACrCtB,IAAKf,EAAWgB,GAChBE,OAAQS,EAAO3B,EAAWG,WAAWK,aCFlC8B,MAnBf,WAAgB,IAAD,EACwBf,mBAAS,IADjC,mBACNV,EADM,KACO0B,EADP,KAWb,OATAC,qBAAU,WACR7C,EAAY8C,gBAAgBC,MAAK,SAAC5C,GAChCoC,QAAQC,IAAIrC,GACZoC,QAAQC,IAAIrC,EAAK6C,MACjBJ,EAAczC,EAAK8C,UACnBV,QAAQC,IAAItB,QAEb,IAGD,yBAAKR,UAAU,OACb,kBAAC,EAAD,CAAKQ,YAAaA,IAClB,kBAAC,EAAD,CAAWA,YAAaA,MCRVgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,kB","file":"static/js/main.72f85c9d.chunk.js","sourcesContent":["import qs from 'qs';\nimport axios from 'axios';\n\nconst baseURL = 'https://earthquake.usgs.gov/';\n\nconst api = axios.create({\n  baseURL,\n  paramsSerializer: (params) => qs.stringify(params),\n});\n\nexport default api;\n","import api from './EarthquakeApi';\n\nclass FeedService {\n  static async retrieveDaily() {\n    const response = await api.get('earthquakes/feed/v1.0/summary/all_day.geojson');\n    return response.data;\n  }\n}\n\nexport default FeedService;\n","import React from 'react';\nimport './QuakeList.scss';\nimport { ic_gps_fixed } from 'react-icons-kit/md/ic_gps_fixed';\nimport { Icon } from 'react-icons-kit';\n\nfunction QuakeItem({ earthquake = {} }) {\n  const date = new Date(earthquake.properties.time);\n  return (\n    <li className=\"QuakeItem\">\n      <div className=\"place\">\n        {earthquake.properties.place}\n      </div>\n      <div className=\"time\">{date.toLocaleString()}</div>\n      <div className=\"magnitude\">\n        {' '}\n        {earthquake.properties.mag}\n        {' '}\n      </div>\n    </li>\n  );\n}\n\nexport default QuakeItem;\n","import React from 'react';\nimport './QuakeList.scss';\nimport { ic_gps_fixed } from 'react-icons-kit/md/ic_gps_fixed';\nimport { Icon } from 'react-icons-kit';\nimport QuakeItem from './QuakeItem';\n\nfunction QuakeList({ earthquakes = [] }) {\n  return (\n    <div className=\"QuakeList\">\n      <HeadRow />\n      {earthquakes.map((earthquake) => <QuakeItem earthquake={earthquake} key={earthquake.id} />)}\n    </div>\n  );\n}\n\nfunction HeadRow() {\n  return (\n    <div className=\"QuakeItem\">\n      <div>\n        {'Location'}\n        <Icon icon={ic_gps_fixed} />\n      </div>\n      <div>\n        {'Time'}\n      </div>\n      <div>\n        {'Magnitude'}\n      </div>\n    </div>\n  );\n}\nexport default QuakeList;\n","import React, { useState } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport './Map.scss';\n\nfunction Map({ earthquakes }) {\n  const losAngelesCoords = { lat: 34, lng: -118 };\n  const [center, setCenter] = useState(losAngelesCoords);\n  const [zoom, setZoom] = useState(8);\n  function handleZoomChanged(newZoom) {\n    console.log(newZoom);\n    setZoom(newZoom);\n  }\n  return (\n    <div>\n      <div className=\"MapHeader\">Recent Earthquakes Heatmap</div>\n      <div className=\"MapWrapper\">\n        <GoogleMapReact\n        bootstrapURLKeys={{ key: '' }}\n        defaultCenter={center}\n        defaultZoom={zoom}\n        onZoomAnimationEnd={handleZoomChanged}\n      >\n        {earthquakes.map((earthquake) => (\n          <RedCircle\n            lat={earthquake.geometry.coordinates[1]}\n            lng={earthquake.geometry.coordinates[0]}\n            key={earthquake.id}\n            radius={zoom * earthquake.properties.mag}\n          />\n        ))}\n\n      </GoogleMapReact>\n      </div>\n    </div>\n  );\n}\n\nfunction RedCircle({ radius = 20 }) {\n  return (\n    <div style={{ width: radius, height: radius }} className=\"RedCircle\" />\n  );\n}\n\n\nexport default Map;\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport FeedService from './FeedService';\nimport QuakeList from './QuakeList';\nimport Map from './Map';\n\nfunction App() {\n  const [earthquakes, setEathquakes] = useState([]);\n  useEffect(() => {\n    FeedService.retrieveDaily().then((data) => {\n      console.log(data);\n      console.log(data.type);\n      setEathquakes(data.features);\n      console.log(earthquakes);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Map earthquakes={earthquakes} />\n      <QuakeList earthquakes={earthquakes} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}